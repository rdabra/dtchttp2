rule("co_re-bpf")
   set_extensions(".bpf.c")
   on_config(function (target)
      assert(is_host("linux"), 'rule("co_re-bpf"): only supported on linux!')
      local headerdir = path.join(target:autogendir(), "rules", "bpf")
      if not os.isdir(headerdir) then
         os.mkdir(headerdir)
      end
      target:add("includedirs", headerdir)
   end)
   before_buildcmd_file(function (target, batchcmds, sourcefile, opt)
        local headerfile = path.join(target:autogendir(), "rules", "bpf", (path.filename(sourcefile):gsub("%.bpf%.c", ".skel.h")))
        local objectfile = path.join(target:autogendir(), "rules", "bpf", (path.filename(sourcefile):gsub("%.bpf%.c", ".bpf.o")))
        local targetarch = "__TARGET_ARCH_x86"
        target:add("includedirs", path.directory(headerfile))
        batchcmds:show_progress(opt.progress, "${color.build.object}compiling.bpf %s", sourcefile)
        batchcmds:mkdir(path.directory(objectfile))
        batchcmds:execv("bpftool",{ "btf", "dump","file","/sys/kernel/btf/vmlinux","format","c"}, {stdout = target:autogendir() .. "/rules/bpf/vmlinux.h"})
        batchcmds:compile(sourcefile, objectfile, {configs = {force = {cxflags = {"-target bpf", "-mllvm", "-bpf-stack-size=1024","-g", "-O2"}}, defines = targetarch}})
        batchcmds:mkdir(path.directory(headerfile))
        batchcmds:execv("bpftool", {"gen", "skeleton", path(objectfile)}, {stdout = headerfile})
        batchcmds:add_depfiles(sourcefile)
        batchcmds:set_depmtime(os.mtime(headerfile))
        batchcmds:set_depcache(target:dependfile(headerfile))
    end)
rule_end()  